# This file is double-licensed under GPLv3 and MIT (see LICENSE file)

### Options ###

local OPT_HELP OPT_VERBOSE OPT_QUIET OPT_RQUIET OPT_NOANSI OPT_CIGNORE OPT_FPATH OPT_SYNOPSIS OPT_BLOCKA OPT_BLOCKB OPT_SCOMM OPT_BASH
local -A opthash
zparseopts -E -D -A opthash h -help v -verbose q -quiet r -really-quiet n -noansi -cignore: f: -fpath: -synopsis: -blocka: -blockb: -scomm -bash || {
    print "$fg[red]Error: Improper options given, see help (-h/--help)$reset_color"
    return 1
}
(( ${+opthash[-h]} + ${+opthash[--help]} )) && OPT_HELP=-h
(( ${+opthash[-v]} + ${+opthash[--verbose]} )) && OPT_VERBOSE=-v
(( ${+opthash[-q]} + ${+opthash[--quiet]} )) && OPT_QUIET=-q
(( ${+opthash[-r]} + ${+opthash[--really-quiet]} )) && {
    OPT_QUIET=-q
    OPT_RQUIET=-r
}
(( ${+opthash[-n]} + ${+opthash[--noansi]} )) && OPT_NOANSI=-n
(( ${+opthash[--cignore]} )) && OPT_CIGNORE=${opthash[--cignore]}
(( ${+opthash[-f]} )) && OPT_FPATH=${opthash[-f]}
(( ${+opthash[--fpath]} )) && OPT_FPATH=${opthash[--fpath]}
(( ${+opthash[--synopsis]} )) && OPT_SYNOPSIS=${opthash[--synopsis]}
(( ${+opthash[--blocka]} )) && OPT_BLOCKA=${opthash[--blocka]}
(( ${+opthash[--blockb]} )) && OPT_BLOCKB=${opthash[--blockb]}
(( ${+opthash[--scomm]} )) && OPT_SCOMM=--scomm
(( ${+opthash[--bash]} )) && OPT_BASH=--bash
[[ -n $OPT_NOANSI ]] && {
    colors=()
    fg=()
    bg=()
    fg_bold=()
    bg_bold=()
    reset_color=""
}

local ZERO=${(%):-%N}

if [[ $ZERO != */* ]]; then
    if [[ -x /usr/local/bin/zsd ]]; then
        ZERO=/usr/local/bin/zsd
    elif [[ -x /usr/bin/zsd ]]; then
        ZERO=/usr/bin/zsd
    elif [[ -x /opt/bin/zsd ]]; then
        ZERO=/opt/bin/zsd
    fi
fi
local TRANSFORM=${ZERO:h}/zsd-transform DETECT=${ZERO:h}/zsd-detect TOADOC=${ZERO:h}/zsd-to-adoc

if [[ -n $OPT_HELP ]]; then
    zsd::usage
    return 0
fi

if [[ $# -le 0 || $* = [[:space:]]## ]]; then
    print -P -- "%F{red}Error:%f Argument needed, see help (-h/--help)"
    return 1
fi

if [[ -n $OPT_FPATH ]]; then
    export FPATH=$OPT_FPATH:$FPATH
fi

[[ -n $OPT_VERBOSE ]] && {
    print -P -- "%F{blue}==>%f Using Zsh binary %F{green}${zsh_control_bin}%f"
    local -a storage
    storage=(zsdoc/data/functions/**/*(N))
    print -P -- "%F{blue}==>%f Found %F{green}${#storage}%f functions"
    storage=(zsdoc/data/functions/*(N))
    print -P -- "%F{blue}==>%f Found %F{green}${#storage}%f scripts"
    print -lP -- "" "%F{cyan}==>%f zshelldoc 1st pass - extract function and script data"
}

local fname
integer ret=0 count=0
for fname; do
    (( count ++ ))
    [[ -z $fname ]] && {
        [[ -z $OPT_QUIET || -n $OPT_VERBOSE ]] && print -- "%F{yellow}Warning: File $fname is empty, skipping %f"
        ret=1
        continue
    }
    if [[ ! -f $fname ]]; then
        [[ -z $OPT_QUIET || -n $OPT_VERBOSE ]] && print -- "%F{yellow}Warning: File $fname not found, skipping %f"
        ret=1
        continue
    fi
    if [[ ! -r $fname ]]; then
        [[ -z $OPT_QUIET || -n $OPT_VERBOSE ]] && print -- "%F{yellow}Warning: File $fname unreadable, skipping %f"
        ret=1
        continue
    fi
    $zsh_control_bin $TRANSFORM $OPT_VERBOSE $OPT_QUIET $OPT_RQUIET $OPT_NOANSI $fname
done
[[ -n $OPT_VERBOSE ]] && {
    print -lP -- "" "%F{cyan}==>%f zshelldoc 2nd pass - extract call-trees and comments"
    local -a storage
    storage=(zsdoc/data/functions/**/*(N))
    print -P -- "%F{blue}==>%f Processed %F{green}${#storage}%f functions"
    storage=(zsdoc/data/functions/*(N))
    print -P -- "%F{blue}==>%f Processed %F{green}${#storage}%f scripts"
}
for fname; do
    [[ -z $fname ]] && continue
    if [[ ! -f $fname ]]; then
        ret=1
        continue
    fi
    if [[ ! -r $fname ]]; then
        ret=1
        continue
    fi
    local cignore="" ciarg=""
    [[ -n $OPT_CIGNORE ]] && {
        cignore=--cignore ciarg=$OPT_CIGNORE
    }
    /usr/bin/env $zsh_control_bin $DETECT $OPT_VERBOSE $OPT_QUIET $OPT_RQUIET $OPT_NOANSI $cignore $ciarg $fname
done
[[ -n $OPT_VERBOSE ]] && {
    print -lP -- "" "%F{cyan}==>%f zshelldoc 3rd pass - generate asciidoc files"
}
for fname; do
    [[ -z $fname ]] && continue
    if [[ ! -f $fname ]]; then
        ret=1
        continue
    fi
    if [[ ! -r $fname ]]; then
        ret=1
        continue
    fi
    local baarg="" bbarg="" blocka="" blockb="" syarg="" synopsis=""
    [[ -n $OPT_SYNOPSIS ]] && {
        synopsis=--synopsis
        syarg=$OPT_SYNOPSIS
    }
    [[ -n $OPT_BLOCKA ]] && {
        blocka=--blocka
        baarg=$OPT_BLOCKA
    }
    [[ -n $OPT_BLOCKB ]] && {
        blockb=--blockb
        bbarg=$OPT_BLOCKB
    }
    $zsh_control_bin $TOADOC $OPT_BASH $OPT_VERBOSE $OPT_QUIET $OPT_RQUIET $OPT_NOANSI $synopsis $syarg $blocka $baarg $blockb $bbarg $OPT_SCOMM $fname
done

if (( $? == 0)); then
  print
fi

return $ret

# vim: set expandtab filetype=zsh shiftwidth=2 softtabstop=2 tabstop=2:
